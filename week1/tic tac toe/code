
import math
def print_board(board):
    """Prints the Tic-Tac-Toe board in a human-readable format."""
    print("\n-------------")
    print(f"| {board[0]} | {board[1]} | {board[2]} |")
    print("-------------")
    print(f"| {board[3]} | {board[4]} | {board[5]} |")
    print("-------------")
    print(f"| {board[6]} | {board[7]} | {board[8]} |")
    print("-------------")

def check_win(board, player):
    """Checks if a player has won the game."""
    win_conditions = [
        [0, 1, 2], [3, 4, 5], [6, 7, 8],  
        [0, 3, 6], [1, 4, 7], [2, 5, 8],  
        [0, 4, 8], [2, 4, 6]            
    ]
    for condition in win_conditions:
        if all(board[i] == player for i in condition):
            return True
    return False

def check_draw(board):
    """Checks if the game is a draw (no empty spaces left)."""
    return ' ' not in board

def is_valid_move(board, move):
    """Checks if a move is valid."""
    return 0 <= move < 9 and board[move] == ' '

# --- AI (Minimax Algorithm) ---

def minimax(board, is_maximizing):
    """
    The Minimax algorithm to find the optimal move.
    :param board: The current game board.
    :param is_maximizing: True for the AI (maximizing player), False for human (minimizing player).
    :return: The best score for the current state.
    """
    if check_win(board, 'O'):
        return 1
    if check_win(board, 'X'):
        return -1
    if check_draw(board):
        return 0

    if is_maximizing:
        best_score = -math.inf
        for i in range(9):
            if board[i] == ' ':
                board[i] = 'O'
                score = minimax(board, False)
                board[i] = ' '  # Undo the move
                best_score = max(score, best_score)
        return best_score
    else:
        best_score = math.inf
        for i in range(9):
            if board[i] == ' ':
                board[i] = 'X'
                score = minimax(board, True)
                board[i] = ' '  # Undo the move
                best_score = min(score, best_score)
        return best_score

def find_best_move(board):
    """Finds the best move for the AI using minimax."""
    best_score = -math.inf
    best_move = -1
    for i in range(9):
        if board[i] == ' ':
            board[i] = 'O'
            score = minimax(board, False)
            board[i] = ' '
            if score > best_score:
                best_score = score
                best_move = i
    return best_move

# --- Main Game Loop ---

def main():
    """The main function to run the game."""
    board = [' ' for _ in range(9)]
    print("Welcome to Tic-Tac-Toe!")
    print("You are 'X', the AI is 'O'.")
    print("Enter a number from 0-8 to make a move.")
    print("The board positions are as follows:")
    print_board([0, 1, 2, 3, 4, 5, 6, 7, 8])
    print_board(board)

    current_player = 'X'
   
    while True:
        if current_player == 'X':
            try:
                move = int(input("\nEnter your move (0-8): "))
                if is_valid_move(board, move):
                    board[move] = 'X'
                    current_player = 'O'
                else:
                    print("Invalid move. Try again.")
                    continue
            except ValueError:
                print("Invalid input. Please enter a number.")
                continue
        else: # AI's turn
            print("\nAI is thinking...")
            move = find_best_move(board)
            board[move] = 'O'
            current_player = 'X'
            print(f"AI chose move {move}.")

        print_board(board)

        if check_win(board, 'X'):
            print("\nCongratulations! You won!")
            break
        elif check_win(board, 'O'):
            print("\nAI wins! Better luck next time.")
            break
        elif check_draw(board):
            print("\nIt's a draw!")
            break

if __name__ == "__main__":
    main()
